// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int count;
    field int maxlength;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let chars = Array.new( maxLength );
        let maxlength = maxLength;
        let count = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return count;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if ( count < maxlength ) {
            let chars[count] = c;
            let count = count + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if ( count > 0 ) {
            let count = count -1;
            let chars[count] = 0;
        }
        return;
    }

    function boolean is_digit(char _char){
        return (_char > 47) & (_char < 58);
    }


    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
     // 48 - 57
    method int intValue() {
        var int i, ret, power, sign;
        let i = 0;
        let ret = 0;
        let power = 1;
        let sign = 1;
        if ( count > 0) {
            if  (charAt(0) = 45)  {
                let i = i + 1;
                let sign = -1;
            }
        }

        while ( (i < count) & String.is_digit(charAt(i)) ) {
            let ret = ret + ( power * (charAt(i) - 48) );
            let i = i + 1;
            let power = power * 10;
        }
        return ret * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int temp;
        let count = 0;
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        let temp = 1;
        while ( val / temp > 9 ) {
            let temp = temp * 10;
        }
        while( temp > 0 ) {
            do appendChar( 48 + (val / temp) );
            let val = val - ((val / temp) * temp);
            let temp = temp / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
