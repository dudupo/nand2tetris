// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if ( x = 0 ) {
            return 0;
        }
        if ( x > 0 ) {
            return x;
        }
        else {
            return -x;
        }
    }

    function int sign(int x) {
        if ( x = 0 ) {
            return 0;
        }
        if ( x > 0 ) {
            return 1;
        }
        else {
            return -1;
        }
    }

    // function int get_ith_bit(int x, int i){
    //     var int num , j;
    //     let num = 1;
    //     let j = 0;
    //     while ( j < i ) {
    //         let j = j + 1;
    //         let num = 2 * num;
    //     }
    //     return x & i;
    // }



    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, ret, j, z, shiftedx;

        if ( y = 0 ) {
            return 0;
        }
        if ( x = 0 ) {
            return 0;
        }

        let i = 1;
        let shiftedx = x;
        let ret = 0;
        let j = 0;
        let z = Math.abs(y);

        while (j < 15) {
            let j = j + 1;
            if ( (z & i) > 0  ) {
                let ret = ret + shiftedx;
            }
            let i = i + i;
            let shiftedx = shiftedx + shiftedx;
        }
        if ( y < 0) {
            return -ret;
        }
        return ret;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        if ( x = 0 ){
            return 0;
        }

        if ( x < 0 ) {
            return -Math.divide( Math.abs(x), y );
        }

        if ( y < 0 ) {
            return -Math.divide( x, Math.abs(y) );
        }

        if ( x < y ) {
            return 0;
        }

        let q = Math.divide(x , (2*y));

        if ( ( x - ((2*q)*y) ) < y ) {
            return 2 * q;
        }
        else {
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, j, z, v;
        let i = 512;
        let j = 0;

        while ( i > 0 ) {
            let v = j + i;
            let z  = v * v;
            /*
                TODO : !!!!!
                    handling the case when addition pass the length of bits.
                    the following is patch. ( z > i )
            */
            if ( z > i ) {
                if ( (z < x) | (z = x) ) {
                    let j = j + i;
                }
            }
            let i = i / 2;
        }
        return j;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ( a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
